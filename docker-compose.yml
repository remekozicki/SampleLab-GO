services:
  backend:
    build: ./slp-backend
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      DB_USERNAME: "postgres"
      DB_PASSWORD: "postgres"
      DB_URL: "jdbc:postgresql://db:5432/sample-lab-db"
      ENCRYPTOR_PASSWORD: "password"
    networks:
      - front-tier
      - back-tier

  backend-go:
    build: ./slp-backend-go
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8090:8090"
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_NAME: sample-lab-db
      ENCRYPTOR_PASSWORD: password
    networks:
      - front-tier
      - back-tier

  frontend:
    build: ./slp-frontend
    depends_on:
      backend:
        condition: service_started
    environment:
      BE_URL: "http://backend:8080/"
    ports:
      - "3000:3000"
    networks:
      - front-tier

  db:
    image: postgres:latest
    ports:
      - "5433:5432"
    volumes:
      - "db-data:/var/lib/postgresql/data"

    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "sample-lab-db"
    networks:
      - back-tier
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  db-post-init:
    image: postgres:latest
    depends_on:
      db:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c"]
    command: >
      sleep 5 &&
      echo 'Running post-init.sql...' &&
      psql -U postgres -d sample-lab-db -h db -f /docker-entrypoint-initdb.d/init.sql
    environment:
      PGPASSWORD: "postgres"
    volumes:
      - ./db-init/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - back-tier

volumes:
  db-data:

networks:
  front-tier:
  back-tier:
